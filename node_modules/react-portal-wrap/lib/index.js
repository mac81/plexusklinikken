'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _reactDom = require('react-dom');

var PortalWrap = (function (_Component) {
    _inherits(PortalWrap, _Component);

    function PortalWrap() {
        _classCallCheck(this, PortalWrap);

        _get(Object.getPrototypeOf(PortalWrap.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(PortalWrap, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props;
            var children = _props.children;
            var _props$node = _props.node;
            var node = _props$node === undefined ? function () {
                var node = document.createElement('div');
                document.body.appendChild(node);
                return node;
            } : _props$node;

            this.node = typeof node.nodeType !== 'undefined' ? node : typeof node === 'function' ? node.call(this) : null;

            this.renderChildren(children);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var parent = this.node.parentNode;
            parent.removeChild(this.node);
        }
    }, {
        key: 'renderChildren',
        value: function renderChildren(children) {
            if (!this.node) return; // do nothing, no node provided
            this.wrapper = (0, _reactDom.render)(children, this.node);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
            // re-render children on update
            this.renderChildren(newProps.children);
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }], [{
        key: 'propTypes',
        value: {
            node: function node(props, propName) {
                if (!props[propName]) return;
                if (typeof props[propName] !== 'function' || typeof props[propName] === 'undefined') {
                    return new Error('node should be a DOMNode or a function that returns a node');
                }
            }
        },
        enumerable: true
    }]);

    return PortalWrap;
})(_react.Component);

exports['default'] = PortalWrap;
module.exports = exports['default'];